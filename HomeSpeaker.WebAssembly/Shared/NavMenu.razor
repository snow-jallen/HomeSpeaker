@using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
@inject HomeSpeakerService svc
@inject IWebAssemblyHostEnvironment hostEnv
@inject ILogger<NavMenu> logger
@inject IConfiguration config

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <div class="navbar-brand">
            <a class="navbar-brand" href="">Home Speaker</a>
            @if (nightscoutUrl?.Length > 0)
            {
                <NavLink href="nightscout"><img src="/OIP.png" width="24" alt="nightscout" /></NavLink>
            }
            @if (showLogs ?? false)
            {
                <NavLink href="aspire"><img src="/aspire-logo-256.png" width="24" alt="aspire" /></NavLink>
            }
        </div>
        <button class="btn btn-dark d-block d-sm-none" @onclick=stopAsync><span class="oi oi-media-stop top-0"></span></button>
        <button class="btn btn-dark d-block d-sm-none" @onclick=skipAsync><span class="oi oi-media-skip-forward top-0"></span></button>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="folders">
                <span class="oi oi-folder" aria-hidden="true"></span> Folders
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="queue">
                <span class="oi oi-list" aria-hidden="true"></span> Queue
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="streams">
                <span class="oi oi-wifi" aria-hidden="true"></span> Streams
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="log">
                <span class="oi oi-book" aria-hidden="true"></span> Activity
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="youtube">
                <span class="oi oi-video" aria-hidden="true"></span> YouTube
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="playlists">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Playlists
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private Uri? aspireUrl = null;
    private bool? showLogs = false;
    private bool collapseNavMenu = true;
    private bool nightMode = false;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private static string? nightscoutUrl = null;

    protected override async Task OnInitializedAsync()
    {
        if (nightscoutUrl is null)
        {
            var httpClient = new HttpClient();
            nightscoutUrl = await httpClient.GetStringAsync($"{hostEnv.BaseAddress}ns") ?? string.Empty;
        }

        if (aspireUrl is null)
        {
            UriBuilder uriBuilder = new UriBuilder(hostEnv.BaseAddress)
            {
                Port = 18888
            };
            aspireUrl = uriBuilder.Uri;
        }

        if (showLogs is null)
        {
            var httpClient = new HttpClient() { BaseAddress = aspireUrl };
            var req = await httpClient.GetAsync("");
            showLogs = req.IsSuccessStatusCode;
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task stopAsync() => await svc.StopPlayingAsync();

    private async Task skipAsync() => await svc.SkipToNextAsync();

    async Task toggleNightmode()
    {
        nightMode = !nightMode;
        try
        {
            await svc.ToggleBrightness();
        }
        catch (Exception ex)
        {
            logger.LogError("Trouble setting brightness {ex}", ex);
            logger.LogError(ex.ToString());
        }
    }
}
