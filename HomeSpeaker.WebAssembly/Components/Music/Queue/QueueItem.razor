@inject HomeSpeakerService svc

<div class="unified-queue-item @(IsCurrentSong ? "current-song" : "")" @onclick="HandleClick">
    <div class="d-flex align-items-center">
        <div class="queue-position me-3">
            @if (IsCurrentSong)
            {
                <i class="fas fa-play text-primary"></i>
            }
            else if (QueuePosition.HasValue)
            {
                <span class="queue-number">@QueuePosition</span>
            }
            else
            {
                <i class="fas fa-grip-vertical text-muted drag-handle"></i>
            }
        </div>
        
        <div class="song-info flex-grow-1">
            <div class="song-name">@SongViewModel.Name</div>
            <div class="song-details">
                @if (!string.IsNullOrEmpty(SongViewModel.Artist))
                {
                    <span class="artist">@SongViewModel.Artist</span>
                }
                @if (!string.IsNullOrEmpty(SongViewModel.Artist) && !string.IsNullOrEmpty(SongViewModel.Album))
                {
                    <span class="separator">•</span>
                }
                @if (!string.IsNullOrEmpty(SongViewModel.Album))
                {
                    <span class="album">@SongViewModel.Album</span>
                }
            </div>
        </div>
        
        <div class="queue-controls">
            @if (ShowPlayButton && !IsCurrentSong)
            {
                <button @onclick:stopPropagation="true" 
                        @onclick="HandlePlay" 
                        class="btn btn-outline-primary btn-sm me-1"
                        title="Play this song">
                    <i class="fas fa-play"></i>
                </button>
            }
            <button @onclick:stopPropagation="true" 
                    @onclick="remove" 
                    class="btn btn-outline-danger btn-sm"
                    title="Remove from queue">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
</div>

<style>
    .unified-queue-item {
        padding: 0.75rem;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        margin-bottom: 0.5rem;
        cursor: pointer;
        transition: all 0.2s ease;
        background-color: #fff;
    }
    
    .unified-queue-item:hover {
        background-color: #f8f9fa;
        border-color: #adb5bd;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .unified-queue-item.current-song {
        background-color: #e7f3ff;
        border-color: #007bff;
        box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
    }
    
    .unified-queue-item.current-song:hover {
        background-color: #d1ecf1;
    }
    
    .queue-position {
        width: 2rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .queue-number {
        font-size: 0.875rem;
        color: #6c757d;
        font-weight: 500;
        text-align: center;
    }
    
    .drag-handle {
        font-size: 0.75rem;
        cursor: grab;
    }
    
    .drag-handle:active {
        cursor: grabbing;
    }
    
    .song-name {
        font-weight: 600;
        color: #212529;
        font-size: 1rem;
        line-height: 1.3;
        margin-bottom: 0.25rem;
    }
    
    .song-details {
        font-size: 0.875rem;
        color: #6c757d;
        line-height: 1.2;
    }
    
    .artist {
        font-weight: 500;
    }
    
    .separator {
        margin: 0 0.5rem;
        opacity: 0.7;
    }
    
    .album {
        opacity: 0.9;
    }
    
    .queue-controls {
        display: flex;
        gap: 0.25rem;
        flex-shrink: 0;
    }
    
    .queue-controls .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        border-width: 1px;
    }
    
    .queue-controls .btn i {
        font-size: 0.75rem;
    }
    
    /* Ensure buttons don't interfere with item click */
    .queue-controls button {
        position: relative;
        z-index: 2;
    }
    
    .unified-queue-item:not(.current-song) .song-name:hover {
        color: #007bff;
    }
</style>

@code {
    [Parameter]
    public SongViewModel SongViewModel { get; set; }

    [Parameter]
    public EventCallback<SongViewModel> Removed { get; set; }
    
    [Parameter]
    public EventCallback<SongViewModel> Played { get; set; }
    
    [Parameter]
    public int? QueuePosition { get; set; }
    
    [Parameter]
    public bool IsCurrentSong { get; set; }
    
    [Parameter]
    public bool ShowPlayButton { get; set; } = false;

    async Task remove()
    {
        await Removed.InvokeAsync(SongViewModel);
    }
    
    async Task HandlePlay()
    {
        if (Played.HasDelegate)
        {
            await Played.InvokeAsync(SongViewModel);
        }
    }
    
    async Task HandleClick()
    {
        // Only trigger play if ShowPlayButton is true and there's a play handler
        if (ShowPlayButton && Played.HasDelegate && !IsCurrentSong)
        {
            await HandlePlay();
        }
    }
}
