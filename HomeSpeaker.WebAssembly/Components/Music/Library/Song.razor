@using HomeSpeaker.WebAssembly.Services
@using Microsoft.JSInterop
@inject HomeSpeakerService svc
@inject ILogger<Song> logger
@inject IJSRuntime JsRuntime

@if (SongViewModel == null)
{
    <div>Nothing to see here...</div>
}
else
{
    var classVal = "row ms-1 py-1 gx-0";
    if (ShowBackground)
    {
        classVal += " bg-light";
    }
    <div class=@classVal>
        <div class="col ms-3">
            <div class="text-wrap" @onclick=toggleDetailsView>@SongViewModel.Name</div>
            @if (ShowFolder)
            {
                <div>@SongViewModel.Folder</div>
            }
        </div>        <div class="col-auto">
            <button @onclick=toggleDetailsView class="btn btn-outline"><span class=@toggleIcon></span></button>
            <PlayButtonWithDropdown Song="SongViewModel" />
            <PlusButtonWithMenu Song="SongViewModel" />
        </div>
        @if (showDetails)
        {
            <div class="d-flex justify-content-between mb-2 pt-2 ps-2 g-0">
                <div class="">
                    <button class="btn btn-outline-danger" @onclick=delete><span class="oi oi-delete me-1"></span>Delete</button>
                </div>
                <div class="">
                    <button class="btn btn-outline-success" @onclick=togglePlaylistModalVisibility><span class="oi oi-list me-1"></span>Playlists</button>
                </div>
                <div class="">
                    <button class="btn btn-outline-info" disabled><span class="oi oi-pencil me-1"></span>Edit</button>
                </div>
            </div>
        }
    </div>
}

@if (!isPlaylistModalHidden)
{
    <FluentDialog Hidden=@isPlaylistModalHidden>
        <AddToPlaylistModal Song=SongViewModel Closed=@togglePlaylistModalVisibility />
    </FluentDialog>
}


@code {
    [Parameter]
    public SongViewModel SongViewModel { get; set; }

    [Parameter]
    public bool ShowFolder { get; set; }

    [Parameter]
    public bool ShowBackground { get; set; }

    [Parameter]
    public EventCallback<int> OnDeleted { get; set; }

    private bool showDetails { get; set; }
    private bool isPlaylistModalHidden = true;    private void toggleDetailsView() => showDetails = !showDetails;
    private string toggleIcon => showDetails ? "oi oi-chevron-top" : "oi oi-chevron-bottom";

    private bool isDeleteConfirmationOpen = false;

    async Task delete()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await svc.HomeSpeakerClient.DeleteSongAsync(new DeleteSongRequest { SongId = SongViewModel.SongId });
            await OnDeleted.InvokeAsync(SongViewModel.SongId);
            showDetails = false;
        }
    }

    void togglePlaylistModalVisibility() => isPlaylistModalHidden = !isPlaylistModalHidden;
}
