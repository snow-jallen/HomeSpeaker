@using HomeSpeaker.WebAssembly.Services
@using Microsoft.JSInterop
@inject HomeSpeakerService svc
@inject ILogger<Song> logger
@inject IJSRuntime JsRuntime

@if (SongViewModel == null)
{
    <div>Nothing to see here...</div>
}
else
{
    var classVal = "row ms-1 py-1 gx-0";
    if (ShowBackground)
    {
        classVal += " bg-light";
    }
    <div class=@classVal>
        <div class="col ms-3">
            <div class="text-wrap" @onclick=toggleDetailsView>@SongViewModel.Name</div>
            @if (ShowFolder)
            {
                <div>@SongViewModel.Folder</div>
            }
        </div>        <div class="col-auto">
            <button @onclick=toggleDetailsView class="btn btn-outline"><span class=@toggleIcon></span></button>
            <PlayButtonWithDropdown Song="SongViewModel" />
            <PlusButtonWithMenu Song="SongViewModel" />
        </div>        @if (showDetails)
        {
            <div class="d-flex justify-content-center mb-2 pt-2 ps-2 g-0 gap-2">
                <button class="btn btn-outline-danger" @onclick=delete><span class="oi oi-delete me-1"></span>Delete</button>
                <button class="btn btn-outline-info" @onclick=toggleEditModalVisibility><span class="oi oi-pencil me-1"></span>Edit</button>
            </div>
        }
    </div>
}

@if (!isEditModalHidden)
{
    <FluentDialog Hidden=@isEditModalHidden>
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Song</h5>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="songName" class="form-label">Title</label>
                        <input type="text" class="form-control" id="songName" @bind="editedName" />
                    </div>
                    <div class="mb-3">
                        <label for="songArtist" class="form-label">Artist</label>
                        <input type="text" class="form-control" id="songArtist" @bind="editedArtist" />
                    </div>
                    <div class="mb-3">
                        <label for="songAlbum" class="form-label">Album</label>
                        <input type="text" class="form-control" id="songAlbum" @bind="editedAlbum" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick=cancelEdit>Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick=saveEdit>Save</button>
                </div>
            </div>
        </div>
    </FluentDialog>
}


@code {
    [Parameter]
    public SongViewModel SongViewModel { get; set; }

    [Parameter]
    public bool ShowFolder { get; set; }

    [Parameter]
    public bool ShowBackground { get; set; }

    [Parameter]
    public EventCallback<int> OnDeleted { get; set; }

    [Parameter]
    public EventCallback OnUpdated { get; set; }

    private bool showDetails { get; set; }
    private bool isEditModalHidden = true;
    private string editedName = string.Empty;
    private string editedArtist = string.Empty;
    private string editedAlbum = string.Empty;

    private void toggleDetailsView() => showDetails = !showDetails;
    private string toggleIcon => showDetails ? "oi oi-chevron-top" : "oi oi-chevron-bottom";

    private bool isDeleteConfirmationOpen = false;

    async Task delete()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await svc.HomeSpeakerClient.DeleteSongAsync(new DeleteSongRequest { SongId = SongViewModel.SongId });
            await OnDeleted.InvokeAsync(SongViewModel.SongId);
            showDetails = false;
        }
    }

    void toggleEditModalVisibility()
    {
        if (isEditModalHidden)
        {
            // Opening modal - populate with current values
            editedName = SongViewModel.Name;
            editedArtist = SongViewModel.Artist;
            editedAlbum = SongViewModel.Album;
        }
        isEditModalHidden = !isEditModalHidden;
    }

    void cancelEdit()
    {
        isEditModalHidden = true;
    }

    async Task saveEdit()
    {
        try
        {
            await svc.UpdateSongAsync(SongViewModel.SongId, editedName, editedArtist, editedAlbum);
            
            // Update the local model
            SongViewModel.Name = editedName;
            SongViewModel.Artist = editedArtist;
            SongViewModel.Album = editedAlbum;
            
            isEditModalHidden = true;
            await OnUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error updating song");
            // You could show an error message here
        }
    }
}
