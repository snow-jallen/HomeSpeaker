@inject HomeSpeakerService svc
@inject IJSRuntime JsRuntime
@using HomeSpeaker.Shared

<style>
    .dragging {
        opacity: 0.5;
        background-color: #f8f9fa;
    }
    
    .drop-target {
        border-top: 3px solid #007bff;
        background-color: #e7f1ff;
    }
    
    .list-group-item[draggable="true"]:hover {
        background-color: #f8f9fa;
    }
</style>

<div class="card mb-3">
    <div class="card-body">
        <div class="row align-items-center">
            <div class="col">
                @if (isEditing)
                {                    <div class="input-group">
                        <input @bind="editName" @onkeypress="OnKeyPress" class="form-control" placeholder="Playlist name" />
                        <button class="btn btn-outline-success" @onclick="SaveEdit" title="Save"><span class="oi oi-check"></span></button>
                        <button class="btn btn-outline-secondary" @onclick="CancelEdit" title="Cancel"><span class="oi oi-x"></span></button>
                    </div>
                }
                else
                {
                    <div @onclick="ToggleShowDetails" style="cursor: pointer;">
                        <h5 class="card-title mb-1">@Playlist.Name</h5>
                        <small class="text-muted">@Playlist.Songs.Count() songs</small>
                    </div>
                }
            </div>
            <div class="col-auto">
                @if (!isEditing)
                {                    <div class="btn-group" role="group">
                        <PlayButtonWithDropdown PlaylistName="@Playlist.Name" />
                        <button class="btn btn-outline-secondary" @onclick="StartEdit" title="Rename playlist">
                            <span class="oi oi-pencil"></span>
                        </button>
                        <button class="btn btn-outline-danger" @onclick="ConfirmDelete" title="Delete playlist">
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>
                }
            </div>
        </div>

        @if (showDetails && !isEditing)
        {
            <div class="mt-3">
                <hr />
                <h6 class="text-muted">Songs in this playlist:</h6>                @if (Playlist.Songs.Any())
                {
                    <div class="list-group list-group-flush">
                        @foreach (var song in Playlist.Songs.Select((s, index) => new { Song = s, Index = index }))
                        {
                            <div class="list-group-item d-flex justify-content-between align-items-center p-2 @(draggedIndex == song.Index ? "dragging" : "") @(dropTargetIndex == song.Index ? "drop-target" : "")"
                                 draggable="true"
                                 @ondragstart="@(e => HandleDragStart(e, song.Index))"
                                 @ondragenter="@(e => HandleDragEnter(e, song.Index))"
                                 @ondragenter:preventDefault="true"
                                 @ondragover="@(e => HandleDragOver(e, song.Index))"
                                 @ondragover:preventDefault="true"
                                 @ondrop="@(e => HandleDrop(e, song.Index))"
                                 @ondrop:preventDefault="true"
                                 @ondragleave="HandleDragLeave"
                                 @ondragend="HandleDragEnd"
                                 style="cursor: move;">
                                <div class="d-flex align-items-center">
                                    <div class="me-2" style="cursor: grab;">
                                        <span class="oi oi-menu"></span>
                                    </div>
                                    <div>
                                        <div class="fw-bold">@song.Song.Name</div>
                                        <small class="text-muted">@song.Song.Artist - @song.Song.Album</small>
                                    </div>
                                </div>
                                <button class="btn btn-outline-danger btn-sm" @onclick="@(async () => await RemoveSong(song.Song.Path))" title="Remove from playlist">
                                    <span class="oi oi-minus"></span>
                                </button>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-muted">This playlist is empty.</p>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public required Playlist Playlist { get; set; }
    [Parameter] public EventCallback OnPlaylistChanged { get; set; }
    
    private bool showDetails = false;
    private bool isEditing = false;
    private string editName = "";
    
    // Drag and drop state
    private int? draggedIndex = null;
    private int? dropTargetIndex = null;

    void ToggleShowDetails() => showDetails = !showDetails;

    void StartEdit()
    {
        isEditing = true;
        editName = Playlist.Name;
    }

    void CancelEdit()
    {
        isEditing = false;
        editName = "";
    }    // Drag and drop event handlers
    void HandleDragStart(DragEventArgs e, int index)
    {
        draggedIndex = index;
        Console.WriteLine($"Drag started for index: {index}");
    }

    void HandleDragEnter(DragEventArgs e, int index)
    {
        if (draggedIndex.HasValue && draggedIndex != index)
        {
            dropTargetIndex = index;
            Console.WriteLine($"Drag entered index: {index}");
            StateHasChanged();
        }
    }    void HandleDragLeave(DragEventArgs e)
    {
        // Clear drop target when leaving an item
        dropTargetIndex = null;
        StateHasChanged();
    }

    void HandleDragOver(DragEventArgs e, int index)
    {
        e.DataTransfer.DropEffect = "move";
        if (draggedIndex.HasValue && draggedIndex != index)
        {
            dropTargetIndex = index;
        }
    }

    async Task HandleDrop(DragEventArgs e, int index)
    {
        Console.WriteLine($"Drop event: dragged={draggedIndex}, target={index}");
        
        if (draggedIndex.HasValue && draggedIndex != index)
        {
            await ReorderSongs(draggedIndex.Value, index);
        }
        
        draggedIndex = null;
        dropTargetIndex = null;
        StateHasChanged();
    }

    void HandleDragEnd(DragEventArgs e)
    {
        Console.WriteLine("Drag ended");
        draggedIndex = null;
        dropTargetIndex = null;
        StateHasChanged();
    }    async Task ReorderSongs(int fromIndex, int toIndex)
    {
        try
        {
            Console.WriteLine($"Reordering: moving song from index {fromIndex} to {toIndex}");
            
            var songs = Playlist.Songs.ToList();
            
            // Validate indices
            if (fromIndex < 0 || fromIndex >= songs.Count || toIndex < 0 || toIndex >= songs.Count)
            {
                Console.WriteLine($"Invalid indices: fromIndex={fromIndex}, toIndex={toIndex}, count={songs.Count}");
                return;
            }
            
            // Perform the reorder
            var song = songs[fromIndex];
            songs.RemoveAt(fromIndex);
            songs.Insert(toIndex, song);
            
            // Create the new order list
            var reorderedSongPaths = songs.Select(s => s.Path).ToList();
            
            Console.WriteLine($"Calling ReorderPlaylistSongsAsync with {reorderedSongPaths.Count} songs");
            await svc.ReorderPlaylistSongsAsync(Playlist.Name, reorderedSongPaths);
            
            Console.WriteLine("Successfully reordered, calling OnPlaylistChanged");
            await OnPlaylistChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error reordering songs: {ex.Message}");
            await JsRuntime.InvokeVoidAsync("alert", $"Error reordering songs: {ex.Message}");
        }
    }async Task SaveEdit()
    {
        await JsRuntime.InvokeVoidAsync("console.log", $"SaveEdit called: editName='{editName}', Playlist.Name='{Playlist.Name}'");
        
        if (string.IsNullOrWhiteSpace(editName) || editName == Playlist.Name)
        {
            await JsRuntime.InvokeVoidAsync("console.log", $"SaveEdit: Canceling edit because name is empty or unchanged");
            CancelEdit();
            return;
        }

        try
        {
            await JsRuntime.InvokeVoidAsync("console.log", $"About to rename playlist from '{Playlist.Name}' to '{editName.Trim()}'");
            await svc.RenamePlaylistAsync(Playlist.Name, editName.Trim());
            await JsRuntime.InvokeVoidAsync("console.log", $"Successfully renamed playlist, now calling OnPlaylistChanged");
            isEditing = false;
            editName = "";
            await OnPlaylistChanged.InvokeAsync();
            await JsRuntime.InvokeVoidAsync("console.log", $"OnPlaylistChanged invoked successfully");
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("console.error", $"Error renaming playlist: {ex.Message}");
            await JsRuntime.InvokeVoidAsync("alert", $"Error renaming playlist: {ex.Message}");
            CancelEdit();
        }
    }

    async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SaveEdit();
        }
        else if (e.Key == "Escape")
        {
            CancelEdit();
        }    }

    async Task ConfirmDelete()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the playlist '{Playlist.Name}'? This action cannot be undone.");
        if (confirmed)
        {
            try
            {
                await svc.DeletePlaylistAsync(Playlist.Name);
                await OnPlaylistChanged.InvokeAsync();
            }
            catch (Exception ex)
            {
                await JsRuntime.InvokeVoidAsync("alert", $"Error deleting playlist: {ex.Message}");
            }
        }
    }    async Task RemoveSong(string songPath)
    {
        try
        {
            await svc.RemoveFromPlaylistAsync(Playlist.Name, songPath);
            await OnPlaylistChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Error removing song: {ex.Message}");
        }
    }
}
