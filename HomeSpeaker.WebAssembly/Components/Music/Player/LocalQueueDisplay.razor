@using HomeSpeaker.WebAssembly.Services
@inject ILocalQueueService LocalQueueService
@inject ILogger<LocalQueueDisplay> Logger
@implements IDisposable

<div class="local-queue-display">    <div class="d-flex align-items-start mb-3">        <div class="flex-grow-1">
            <h4 class="mb-0">Local Queue</h4>
            <div class="fs-6 mt-0 text-muted">(@LocalQueueService.Queue.Count songs â€¢ drag to reorder)</div>
        </div>
        <div>
            <button @onclick="ShuffleQueue" 
                    class="btn btn-outline-secondary btn-sm me-2" 
                    disabled="@(LocalQueueService.Queue.Count <= 1)"
                    title="Shuffle queue">
                <i class="fas fa-random me-1"></i>Shuffle
            </button>
            <button @onclick="ClearQueue" 
                    class="btn btn-outline-danger btn-sm" 
                    disabled="@(LocalQueueService.Queue.Count == 0)">
                <i class="fas fa-trash me-1"></i>Clear Queue
            </button>
        </div>
    </div>@if (LocalQueueService.Queue.Any())
    {
        <div class="unified-queue-list">
            @for (int i = 0; i < LocalQueueService.Queue.Count; i++)
            {
                var song = LocalQueueService.Queue[i];
                var index = i;
                var isCurrentSong = index == LocalQueueService.CurrentIndex;
                  <div class="queue-item-wrapper @(draggedIndex == index ? "dragging" : "") @(dropTargetIndex == index ? "drop-target" : "")" 
                     data-index="@index"
                     draggable="true"
                     @ondragstart="@(() => StartDrag(index))"
                     @ondragover="@((e) => HandleDragOver(e, index))"
                     @ondragover:preventDefault="true"
                     @ondrop="@(() => Drop(index))"
                     @ondragenter="@(() => HandleDragEnter(index))"
                     @ondragleave="@(() => HandleDragLeave(index))"
                     @ondragend="@(() => HandleDragEnd())">
                    <QueueItem SongViewModel="song" 
                             Removed="@(async (s) => await RemoveSong(index))"
                             Played="@(async (s) => await PlaySongAtIndex(index))"
                             QueuePosition="@(index + 1)"
                             IsCurrentSong="@isCurrentSong"
                             ShowPlayButton="true" />
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center text-muted p-4">
            <div class="empty-queue-icon mb-3">
                <i class="fas fa-headphones fa-3x opacity-25"></i>
            </div>
            <h5 class="text-muted">No songs in local queue</h5>
            <p class="mb-0">Use "Stream to Device" from any play button to add songs here</p>
        </div>
    }
</div>

@code {
    private int draggedIndex = -1;
    private int? dropTargetIndex = null;

    protected override void OnInitialized()
    {
        LocalQueueService.QueueChanged += OnQueueChanged;
        LocalQueueService.CurrentSongChanged += OnCurrentSongChanged;
    }

    private void StartDrag(int index)
    {
        draggedIndex = index;
        Logger.LogInformation("Started dragging item at index {index}", index);
    }

    private void HandleDragOver(DragEventArgs e, int index)
    {
        if (draggedIndex >= 0 && draggedIndex != index)
        {
            dropTargetIndex = index;
            e.DataTransfer.DropEffect = "move";
        }
    }

    private void HandleDragEnter(int index)
    {
        if (draggedIndex >= 0 && draggedIndex != index)
        {
            dropTargetIndex = index;
        }
    }

    private void HandleDragLeave(int index)
    {
        // Only clear drop target if we're not dragging over this item anymore
        if (dropTargetIndex == index)
        {
            dropTargetIndex = null;
        }
    }

    private void HandleDragEnd()
    {
        draggedIndex = -1;
        dropTargetIndex = null;
        StateHasChanged();
    }    private async Task Drop(int targetIndex)
    {
        Logger.LogInformation("Drop called: draggedIndex={draggedIndex}, targetIndex={targetIndex}", draggedIndex, targetIndex);
        
        if (draggedIndex < 0 || draggedIndex >= LocalQueueService.Queue.Count || 
            targetIndex < 0 || targetIndex >= LocalQueueService.Queue.Count ||
            draggedIndex == targetIndex)
        {
            Logger.LogWarning("Invalid drop operation: draggedIndex={draggedIndex}, targetIndex={targetIndex}, queueCount={count}", 
                draggedIndex, targetIndex, LocalQueueService.Queue.Count);
            HandleDragEnd();
            return;
        }

        try
        {
            Logger.LogInformation("Moving song from index {fromIndex} to {toIndex}", draggedIndex, targetIndex);
            await LocalQueueService.MoveSongAsync(draggedIndex, targetIndex);
            Logger.LogInformation("Successfully moved song from index {fromIndex} to {toIndex}", draggedIndex, targetIndex);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error reordering local queue from index {draggedIndex} to {targetIndex}", draggedIndex, targetIndex);
        }
        finally
        {
            HandleDragEnd();
        }
    }

    private async Task PlaySongAtIndex(int index)
    {
        try
        {
            await LocalQueueService.PlaySongAtIndexAsync(index);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error playing song at index {index}", index);
        }
    }

    private async Task RemoveSong(int index)
    {
        try
        {
            await LocalQueueService.RemoveSongAsync(index);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error removing song at index {index}", index);
        }
    }

    private async Task ClearQueue()
    {
        try
        {
            await LocalQueueService.ClearQueueAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error clearing local queue");
        }
    }

    private async Task ShuffleQueue()
    {
        try
        {
            await LocalQueueService.ShuffleQueueAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error shuffling local queue");
        }
    }

    private void OnQueueChanged(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnCurrentSongChanged(object? sender, SongViewModel currentSong)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        LocalQueueService.QueueChanged -= OnQueueChanged;
        LocalQueueService.CurrentSongChanged -= OnCurrentSongChanged;
    }
}

<style>
    .local-queue-display {
        margin-top: 1rem;
    }
    
    .unified-queue-list {
        margin-top: 1rem;
    }
    
    .empty-queue-icon {
        opacity: 0.3;
    }
    
    /* Drag and drop styling */
    .queue-item-wrapper {
        transition: all 0.2s ease;
        cursor: grab;
    }
    
    .queue-item-wrapper:active {
        cursor: grabbing;
    }
    
    .queue-item-wrapper.dragging {
        opacity: 0.5;
        transform: scale(0.95);
    }
      .queue-item-wrapper.drop-target {
        border: 2px dashed #007bff;
        background-color: rgba(0, 123, 255, 0.1);
        transform: translateY(-2px);
        border-radius: 0.375rem;
        position: relative;
    }
    
    .queue-item-wrapper.drop-target::before {
        content: '';
        position: absolute;
        top: -2px;
        left: 0;
        right: 0;
        height: 2px;
        background-color: #007bff;
        border-radius: 1px;
        z-index: 1;
    }
</style>
