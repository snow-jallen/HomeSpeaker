@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime

<div class="position-relative d-inline-block" @ref="containerRef">
    <button @onclick="ToggleMenu" class="btn btn-adaptive-contrast" title="Add to queue or playlist">
        <span class="oi oi-plus" />
    </button>
    
    @if (showMenu)
    {
        <div class="dropdown-menu-container" style="position: absolute; top: 100%; @dropdownPositionStyle z-index: 10000;">
            <AddToQueueOrPlaylistModal Songs="Songs" Song="Song" OnClosed="CloseMenu" />
        </div>
    }
</div>

@* Click outside to close *@
@if (showMenu)
{
    <div class="position-fixed" style="top: 0; left: 0; width: 100vw; height: 100vh; z-index: 9999;" @onclick="CloseMenu"></div>
}

@code {
    [Parameter] public List<SongViewModel>? Songs { get; set; }
    [Parameter] public SongViewModel? Song { get; set; }

    private bool showMenu = false;
    private ElementReference containerRef;
    private string dropdownPositionStyle = "right: 0;";

    private async void ToggleMenu()
    {
        showMenu = !showMenu;
        if (showMenu)
        {
            await UpdateDropdownPosition();
        }
        StateHasChanged();
    }

    private void CloseMenu()
    {
        showMenu = false;
        StateHasChanged();
    }    private async Task UpdateDropdownPosition()
    {
        try
        {
            // Use JavaScript to check positioning and return the appropriate style
            var positionStyle = await JsRuntime.InvokeAsync<string>("eval", $@"
                (function(element) {{
                    var rect = element.getBoundingClientRect();
                    var viewportWidth = window.innerWidth;
                    var dropdownWidth = 220; // Approximate width of dropdown
                    
                    if (rect.right + dropdownWidth > viewportWidth) {{
                        return 'right: 0;';
                    }} else {{
                        return 'left: 0;';
                    }}
                }})(arguments[0])", containerRef);
            
            dropdownPositionStyle = positionStyle;
        }
        catch
        {
            // Fallback to default positioning if JS call fails
            dropdownPositionStyle = "right: 0;";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (showMenu)
        {
            // Add event listener for escape key to close menu
            await JsRuntime.InvokeVoidAsync("eval", @"
                document.addEventListener('keydown', function escapeHandler(e) {
                    if (e.key === 'Escape') {
                        document.removeEventListener('keydown', escapeHandler);
                        // Find and click the overlay to close the menu
                        const overlay = document.querySelector('.position-fixed[style*=""z-index: 9999""]');
                        if (overlay) overlay.click();
                    }
                });            ");
        }
    }
}
