@using HomeSpeaker.Shared.BloodSugar
@using HomeSpeaker.WebAssembly.Services
@inject IBloodSugarService BloodSugarService
@inject ILogger<BloodSugarMonitor> Logger
@implements IDisposable

<div class="blood-sugar-card mb-2">
    <div class="card border-0 shadow-sm">        <div class="card-header bg-info text-white py-2">
            <div class="d-flex justify-content-between align-items-center">
                <h6 class="mb-0">
                    <i class="fas fa-tint me-1"></i>
                    Blood Sugar Monitor
                </h6>
                <button class="btn btn-outline-light btn-sm" @onclick="ForceRefreshBloodSugarData" disabled="@isLoading">
                    <i class="fas fa-redo me-1"></i>
                    @if (isLoading) { <span>Loading...</span> } else { <span>Force Refresh</span> }
                </button>
            </div>
        </div>
        <div class="card-body py-2">
            @if (bloodSugarStatus?.CurrentReading != null)
            {
                <div class="row g-2">
                    <div class="col-4">                        <div class="text-center">
                            <div class="mb-2">
                                <i class="fas fa-tint fa-2x" style="color: @bloodSugarStatus.StatusColor"></i>
                            </div>
                            <div class="h6 text-muted mb-2">Current</div>
                            <div class="blood-sugar-display">
                                <span class="display-1 fw-bold" style="color: @bloodSugarStatus.StatusColor">@bloodSugarStatus.CurrentReading.Sgv</span>
                            </div>
                            <div class="small text-muted">@bloodSugarStatus.StatusText</div>
                        </div>
                    </div>
                    <div class="col-4">                        <div class="text-center">
                            <div class="mb-2">
                                <span class="fa-2x" style="color: @GetTrendColor(bloodSugarStatus.CurrentReading.Direction)">@bloodSugarStatus.CurrentReading.DirectionIcon</span>
                            </div>
                            <div class="h6 text-muted mb-2">Trend</div>
                            <div class="trend-display">
                                <span class="h3 fw-semibold" style="color: @GetTrendColor(bloodSugarStatus.CurrentReading.Direction)">@bloodSugarStatus.CurrentReading.DirectionDescription</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-4">                        <div class="text-center">
                            <div class="mb-2">
                                <i class="fas fa-clock fa-2x" style="color: @(bloodSugarStatus.IsStale ? "#dc3545" : "#28a745")"></i>
                            </div>
                            <div class="h6 text-muted mb-2">Last Reading</div>
                            <div class="time-display">
                                <span class="small" style="color: @(bloodSugarStatus.IsStale ? "#dc3545" : "#6c757d")">@FormatTimeSince(bloodSugarStatus.TimeSinceLastReading)</span>
                            </div>
                        </div>
                    </div>
                </div>
                  <div class="text-center mt-1">
                    <small class="text-muted">
                        Updated: @lastUpdated.ToString("HH:mm:ss")
                        @if (bloodSugarStatus.IsStale)
                        {
                            <span class="badge bg-warning ms-1 p-1">⚠️ Stale</span>
                        }
                        @if (bloodSugarStatus.LastUpdated != default(DateTime))
                        {
                            <span class="ms-1">• Cached: @FormatTimeSince(DateTime.Now - bloodSugarStatus.LastUpdated)</span>
                        }
                    </small>                </div>
            }
            else if (isLoading)
            {
                <div class="text-center py-2">
                    <div class="spinner-border spinner-border-sm text-info" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="mt-1 small">Loading...</div>
                </div>
            }
            else
            {
                <div class="text-center py-2">
                    <div class="text-muted small">
                        <i class="fas fa-exclamation-triangle me-1"></i>
                        Unable to load data
                    </div>
                    <button class="btn btn-outline-info btn-sm mt-1" @onclick="RefreshBloodSugarData">
                        <i class="fas fa-sync-alt me-1"></i>
                        Retry
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<style>    .blood-sugar-card .blood-sugar-display {
        margin: 0.25rem 0;
        line-height: 0.9;
    }
      .blood-sugar-card .blood-sugar-display .display-1 {
        font-size: 4rem !important;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
    }
    
    /* Extra large on smaller screens for better visibility */
    @@media (max-width: 1024px) {
        .blood-sugar-card .blood-sugar-display .display-1 {
            font-size: 5rem !important;
        }
    }    .blood-sugar-card .trend-display {
        margin: 0.25rem 0;
        line-height: 1.1;
    }
    
    .blood-sugar-card .time-display {
        margin: 0.25rem 0;
    }
    
    .blood-sugar-card .badge {
        white-space: nowrap;
        font-size: 0.7rem;
    }
    
    .blood-sugar-card .fas {
        margin-bottom: 4px;
        opacity: 0.8;
    }
    
    .blood-sugar-card .fas:hover {
        opacity: 1;
        transform: scale(1.05);
        transition: all 0.2s ease-in-out;
    }    .blood-sugar-card .card-body {
        padding: 1rem;
    }
    
    .blood-sugar-card .small {
        font-size: 0.8rem;
    }
</style>

@code {
    private BloodSugarStatus? bloodSugarStatus;
    private DateTime lastUpdated = DateTime.Now;
    private Timer? refreshTimer;
    private bool isLoading = true;
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing BloodSugarMonitor component...");
        
        await RefreshBloodSugarData();
          // Set up auto-refresh every 1 minute (server has smart cache based on reading age)
        refreshTimer = new Timer(async _ => 
        {
            try
            {
                await InvokeAsync(RefreshBloodSugarData);
            }
            catch (ObjectDisposedException)
            {
                // Component was disposed, ignore
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error in blood sugar refresh timer");
            }
        }, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
    }
    
    private async Task RefreshBloodSugarData()
    {
        Logger.LogInformation("Refreshing blood sugar data...");

        try
        {
            isLoading = true;
            StateHasChanged();
            
            bloodSugarStatus = await BloodSugarService.GetBloodSugarStatusAsync();
            lastUpdated = DateTime.Now;
            isLoading = false;
            
            Logger.LogInformation("Blood sugar data refreshed successfully");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to refresh blood sugar data");
            Console.WriteLine($"Failed to refresh blood sugar data: {ex.Message}"); // Temporary - shows immediately
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ClearBloodSugarCache()
    {
        Logger.LogInformation("Clearing blood sugar cache...");

        try
        {
            var success = await BloodSugarService.ClearCacheAsync();
            if (success)
            {
                Logger.LogInformation("Blood sugar cache cleared successfully");
            }
            else
            {
                Logger.LogWarning("Failed to clear blood sugar cache");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error clearing blood sugar cache");
        }
    }

    private async Task ForceRefreshBloodSugarData()
    {
        Logger.LogInformation("Force refreshing blood sugar data...");

        try
        {
            isLoading = true;
            StateHasChanged();
            
            bloodSugarStatus = await BloodSugarService.RefreshAsync();
            lastUpdated = DateTime.Now;
            isLoading = false;
            StateHasChanged();
            
            Logger.LogInformation("Blood sugar data force refreshed successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to force refresh blood sugar data");
            Console.WriteLine($"Failed to force refresh blood sugar data: {ex.Message}");
            isLoading = false;
            StateHasChanged();
        }
    }

    private string FormatTimeSince(TimeSpan timeSince)
    {
        if (timeSince.TotalMinutes < 1)
            return "< 1 min ago";
        else if (timeSince.TotalMinutes < 60)
            return $"{(int)timeSince.TotalMinutes} min ago";
        else if (timeSince.TotalHours < 24)
            return $"{(int)timeSince.TotalHours}h {(int)(timeSince.TotalMinutes % 60)}m ago";
        else
            return $"{(int)timeSince.TotalDays}d ago";
    }
    
    private string GetTrendColor(string direction) => direction switch
    {
        "DoubleUp" or "SingleUp" => "#007bff", // Blue for rising
        "Flat" => "#28a745", // Green for stable
        "SingleDown" or "DoubleDown" => "#dc3545", // Red for falling
        "FortyFiveUp" => "#17a2b8", // Teal for rising moderately
        "FortyFiveDown" => "#fd7e14", // Orange for falling moderately
        _ => "#6c757d" // Gray for unknown
    };

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}
