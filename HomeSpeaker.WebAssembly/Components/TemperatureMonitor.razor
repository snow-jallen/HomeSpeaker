@using HomeSpeaker.Shared.Temperature
@using HomeSpeaker.WebAssembly.Services
@inject ITemperatureService TemperatureService
@inject ILogger<TemperatureMonitor> Logger
@implements IDisposable

<div class="temperature-card mb-2">
    <div class="card border-0 shadow-sm">        <div class="card-header bg-primary text-white py-2">
            <div class="d-flex justify-content-between align-items-center">
                <h6 class="mb-0">
                    <i class="fas fa-thermometer-half me-1"></i>
                    Temperature Monitor

                @if (temperatureStatus != null && temperatureStatus.OutsideTemperature.HasValue && temperatureStatus.YoungerGirlsRoomTemperature.HasValue)
                {
                    @if (temperatureStatus.ShouldWindowsBeClosed)
                    {
                        <span class="badge bg-warning p-1">
                            <i class="fas fa-window-close me-1"></i>
                            Keep Closed
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-success p-1">
                            <i class="fas fa-window-restore me-1"></i>
                            Open Window
                        </span>
                    }
                }
                else
                {
                    <span class="badge bg-secondary p-1">
                        <i class="fas fa-question me-1"></i>
                        No Data
                    </span>
                }
                </h6>
                <button class="btn btn-outline-light btn-sm" @onclick="ForceRefreshTemperatureData" disabled="@isLoading">
                    <i class="fas fa-redo me-1"></i>
                    @if (isLoading) { <span>Loading...</span> } else { <span>Force Refresh</span> }
                </button>
            </div>
        </div>
        <div class="card-body py-2">
            @if (temperatureStatus != null)
            {
                <div class="row g-2">
                    <div class="col-6">
                        <div class="text-center">
                            <div class="mb-1">
                                <i class="fas fa-cloud-sun fa-lg" style="color: @GetTemperatureColor(temperatureStatus.OutsideTemperature)"></i>
                            </div>
                            <div class="small text-muted">Outside</div>
                            <div class="temperature-display">
                                <span class="h6" style="color: @GetTemperatureColor(temperatureStatus.OutsideTemperature)">@FormatTemperature(temperatureStatus.OutsideTemperature)</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="text-center">
                            <div class="mb-1">
                                <i class="fas fa-female fa-lg" style="color: @GetTemperatureColor(temperatureStatus.YoungerGirlsRoomTemperature)"></i>
                            </div>
                            <div class="small text-muted">Girl's Room</div>
                            <div class="temperature-display">
                                <span class="h6" style="color: @GetTemperatureColor(temperatureStatus.YoungerGirlsRoomTemperature)">@FormatTemperature(temperatureStatus.YoungerGirlsRoomTemperature)</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="text-center">
                            <div class="mb-1">
                                <i class="fas fa-male fa-lg" style="color: @GetTemperatureColor(temperatureStatus.BoysRoomTemperature)"></i>
                            </div>
                            <div class="small text-muted">Boy's Room</div>
                            <div class="temperature-display">
                                <span class="h6" style="color: @GetTemperatureColor(temperatureStatus.BoysRoomTemperature)">@FormatTemperature(temperatureStatus.BoysRoomTemperature)</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="text-center">
                            <div class="mb-1">
                                <i class="fas fa-seedling fa-lg" style="color: @GetTemperatureColor(temperatureStatus.GreenhouseTemperature)"></i>
                            </div>
                            <div class="small text-muted">Greenhouse</div>
                            <div class="temperature-display">
                                <span class="h6" style="color: @GetTemperatureColor(temperatureStatus.GreenhouseTemperature)">@FormatTemperature(temperatureStatus.GreenhouseTemperature)</span>
                            </div>
                        </div>                    </div>
                </div>                
                  <div class="text-center mt-1">
                    <small class="text-muted">
                        Updated: @lastUpdated.ToString("HH:mm:ss")
                        @if (temperatureStatus.LastCachedAt != default(DateTime))
                        {
                            <span class="ms-1">• Cached: @FormatTimeSince(DateTime.Now - temperatureStatus.LastCachedAt)</span>
                        }
                    </small>
                </div>
            }
            else if (isLoading)
            {
                <div class="text-center py-2">
                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="mt-1 small">Loading...</div>
                </div>
            }
            else
            {
                <div class="text-center py-2">
                    <div class="text-muted small">
                        <i class="fas fa-exclamation-triangle me-1"></i>
                        Unable to load data
                    </div>
                    <button class="btn btn-outline-primary btn-sm mt-1" @onclick="RefreshTemperatureData">
                        <i class="fas fa-sync-alt me-1"></i>
                        Retry                    </button>                </div>
            }
        </div>
    </div>
</div>

<style>
    .temperature-card .temperature-display {
        margin: 0.25rem 0;
    }
    
    .temperature-card .recommendation-display {
        margin: 0.25rem 0;
    }
    
    .temperature-card .badge {
        white-space: nowrap;
        font-size: 0.8rem;
    }
    
    .temperature-card .fas {
        margin-bottom: 4px;
        opacity: 0.8;
    }
    
    .temperature-card .fas:hover {
        opacity: 1;
        transform: scale(1.05);
        transition: all 0.2s ease-in-out;
    }
    
    .temperature-card .card-body {
        padding: 0.5rem;
    }
    
    .temperature-card .small {
        font-size: 0.8rem;
    }
</style>

@code {
    private TemperatureStatus? temperatureStatus;
    private DateTime lastUpdated = DateTime.Now;
    private Timer? refreshTimer;
    private bool isLoading = true;
    
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing TemperatureMonitor component...");
        
        await RefreshTemperatureData();
          // Set up auto-refresh every 1 minute (server has 2-minute cache)
        refreshTimer = new Timer(async _ => 
        {
            try
            {
                await InvokeAsync(RefreshTemperatureData);
            }
            catch (ObjectDisposedException)
            {
                // Component was disposed, ignore
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error in temperature refresh timer");
            }
        }, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
    }
    
    private async Task RefreshTemperatureData()
    {
        Logger.LogInformation("Refreshing temperature data...");

        try
        {
            isLoading = true;
            StateHasChanged();
            
            temperatureStatus = await TemperatureService.GetTemperatureStatusAsync();
            lastUpdated = DateTime.Now;
            isLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to refresh temperature data");
            Console.WriteLine($"Failed to refresh temperature data: {ex.Message}"); // Temporary - shows immediately
            isLoading = false;
            StateHasChanged();
        }
    }    private string FormatTemperature(double? temperature)
    {
        return temperature.HasValue ? $"{temperature.Value:F1}°F" : "N/A";
    }

    private string GetTemperatureColor(double? temperature)
    {
        if (!temperature.HasValue)
            return "#6c757d"; // Gray for no data
        
        var temp = temperature.Value;
        
        // Temperature ranges and color mapping
        // Cold: ≤ 40°F - Blue
        // Cool: 41-60°F - Light Blue to Green 
        // Comfortable: 61-75°F - Green
        // Warm: 76-85°F - Yellow to Orange
        // Hot: ≥ 86°F - Red to Dark Red
        
        if (temp <= 40)
        {
            // Very cold - Blue
            return "#0066cc";
        }
        else if (temp <= 50)
        {
            // Cold - Light Blue
            return "#3399ff";
        }
        else if (temp <= 60)
        {
            // Cool - Blue to Green
            return "#00cccc";
        }
        else if (temp <= 70)
        {
            // Comfortable - Green
            return "#00cc66";
        }
        else if (temp <= 75)
        {
            // Comfortable - Light Green
            return "#66cc00";
        }
        else if (temp <= 80)
        {
            // Warm - Yellow-Green
            return "#cccc00";
        }
        else if (temp <= 85)
        {
            // Warm - Orange
            return "#ff9900";
        }
        else if (temp <= 95)
        {
            // Hot - Red-Orange
            return "#ff6600";
        }
        else
        {
            // Very hot - Dark Red
            return "#cc0000";
        }
    }

    private async Task ClearTemperatureCache()
    {
        Logger.LogInformation("Clearing temperature cache...");

        try
        {
            var success = await TemperatureService.ClearCacheAsync();
            if (success)
            {
                Logger.LogInformation("Temperature cache cleared successfully");
            }
            else
            {
                Logger.LogWarning("Failed to clear temperature cache");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error clearing temperature cache");
        }
    }

    private async Task ForceRefreshTemperatureData()
    {
        Logger.LogInformation("Force refreshing temperature data...");

        try
        {
            isLoading = true;
            StateHasChanged();
            
            temperatureStatus = await TemperatureService.RefreshAsync();
            lastUpdated = DateTime.Now;
            isLoading = false;
            StateHasChanged();
            
            Logger.LogInformation("Temperature data force refreshed successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to force refresh temperature data");
            Console.WriteLine($"Failed to force refresh temperature data: {ex.Message}");
            isLoading = false;
            StateHasChanged();
        }
    }

    private string FormatTimeSince(TimeSpan timeSince)
    {
        if (timeSince.TotalMinutes < 1)
            return "< 1 min";
        else if (timeSince.TotalMinutes < 60)
            return $"{(int)timeSince.TotalMinutes} min";
        else if (timeSince.TotalHours < 24)
            return $"{(int)timeSince.TotalHours}h {(int)(timeSince.TotalMinutes % 60)}m";
        else
            return $"{(int)timeSince.TotalDays}d";
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}
