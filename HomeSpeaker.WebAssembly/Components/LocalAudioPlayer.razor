@using HomeSpeaker.WebAssembly.Services
@inject IBrowserAudioService BrowserAudioService
@inject IPlaybackModeService PlaybackModeService
@inject ILogger<LocalAudioPlayer> Logger
@implements IDisposable

@if (PlaybackModeService.CurrentMode == PlaybackMode.Local && playerStatus != null)
{
    <div class="local-audio-player">
        <div class="d-flex align-items-center mb-2">
            <div class="btn-group me-3" role="group">
                <button class="btn btn-outline-primary btn-sm" @onclick="PreviousTrack">
                    <i class="fas fa-step-backward"></i>
                </button>
                
                @if (playerStatus.IsPlaying)
                {
                    <button class="btn btn-outline-primary btn-sm" @onclick="Pause">
                        <i class="fas fa-pause"></i>
                    </button>
                }
                else
                {
                    <button class="btn btn-outline-primary btn-sm" @onclick="Play">
                        <i class="fas fa-play"></i>
                    </button>
                }
                
                <button class="btn btn-outline-primary btn-sm" @onclick="Stop">
                    <i class="fas fa-stop"></i>
                </button>
                
                <button class="btn btn-outline-primary btn-sm" @onclick="NextTrack">
                    <i class="fas fa-step-forward"></i>
                </button>
            </div>
            
            <div class="flex-grow-1 me-3">
                <div class="d-flex align-items-center">
                    <small class="text-muted me-2">Vol:</small>
                    <input type="range" class="form-range" 
                           min="0" max="100" 
                           value="@volumeLevel"
                           @onchange="OnVolumeChange" />
                    <small class="text-muted ms-2">@volumeLevel%</small>
                </div>
            </div>
        </div>
        
        @if (!string.IsNullOrEmpty(playerStatus.CurrentSong))
        {
            <div class="current-song-info mb-2">
                <div class="fw-bold text-truncate">@playerStatus.CurrentSong</div>
                <div class="d-flex align-items-center">
                    <small class="text-muted me-2">@TimeSpan.FromSeconds(playerStatus.CurrentTime).ToString(@"mm\:ss")</small>
                    <div class="progress flex-grow-1 me-2" style="height: 4px;">
                        <div class="progress-bar" 
                             style="width: @(playerStatus.PercentComplete)%"
                             role="progressbar"></div>
                    </div>
                    <small class="text-muted">@TimeSpan.FromSeconds(playerStatus.Duration).ToString(@"mm\:ss")</small>
                </div>
            </div>
        }
    </div>
}

@code {
    private BrowserPlayerStatus? playerStatus;
    private int volumeLevel = 50;
    private Timer? statusTimer;

    protected override async Task OnInitializedAsync()
    {
        BrowserAudioService.StatusChanged += OnStatusChanged;
        
        // Get initial status
        playerStatus = await BrowserAudioService.GetStatusAsync();
        volumeLevel = (int)(playerStatus.Volume * 100);
        
        // Poll for status updates
        statusTimer = new Timer(async _ =>
        {
            try
            {
                playerStatus = await BrowserAudioService.GetStatusAsync();
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error getting player status");
            }
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private async Task Play()
    {
        try
        {
            await BrowserAudioService.ResumeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error resuming playback");
        }
    }

    private async Task Pause()
    {
        try
        {
            await BrowserAudioService.PauseAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error pausing playback");
        }
    }

    private async Task Stop()
    {
        try
        {
            await BrowserAudioService.StopAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error stopping playback");
        }
    }

    private Task PreviousTrack()
    {
        // TODO: Implement previous track functionality
        return Task.CompletedTask;
    }

    private Task NextTrack()
    {
        // TODO: Implement next track functionality
        return Task.CompletedTask;
    }

    private async Task OnVolumeChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newVolume))
        {
            volumeLevel = newVolume;
            try
            {
                await BrowserAudioService.SetVolumeAsync(newVolume / 100.0f);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error setting volume");
            }
        }
    }

    private void OnStatusChanged(object? sender, BrowserPlayerStatus status)
    {
        playerStatus = status;
        volumeLevel = (int)(status.Volume * 100);
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        statusTimer?.Dispose();
        BrowserAudioService.StatusChanged -= OnStatusChanged;
    }
}

<style>
    .local-audio-player {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        padding: 0.75rem;
        margin-bottom: 1rem;
    }
    
    .current-song-info {
        font-size: 0.9rem;
    }
    
    .progress {
        cursor: pointer;
    }
</style>
