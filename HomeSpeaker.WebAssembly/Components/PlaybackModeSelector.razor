@using HomeSpeaker.WebAssembly.Services
@inject IPlaybackModeService PlaybackModeService
@inject ILogger<PlaybackModeSelector> Logger
@implements IDisposable

<div class="playback-mode-selector">
    <div class="d-flex align-items-center">
        <label class="form-label me-2 mb-0">Playback:</label>
        <div class="btn-group" role="group" aria-label="Playback mode">
            <input type="radio" class="btn-check" name="playbackMode" id="serverMode" 
                   checked="@(isServerMode)"
                   @onchange="@(() => SetModeToServer())" />
            <label class="btn btn-outline-primary btn-sm" for="serverMode">
                <i class="fas fa-server me-1"></i>Server
            </label>

            <input type="radio" class="btn-check" name="playbackMode" id="localMode" 
                   checked="@(!isServerMode)"
                   @onchange="@(() => SetModeToLocal())" />
            <label class="btn btn-outline-primary btn-sm" for="localMode">
                <i class="fas fa-headphones me-1"></i>Local
            </label>
        </div>
    </div>
    
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="mt-2">
            <small class="text-muted">@statusMessage</small>
        </div>
    }
    
    <div class="mt-2">
        <strong>Current Mode: @(isServerMode ? "Server" : "Local")</strong>
        <br>
        <small>Debug: IsServerMode = @isServerMode</small>
    </div>
</div>

@code {
    private bool isServerMode = true;
    private string? statusMessage;

    protected override void OnInitialized()
    {
        UpdateModeFromService();
        PlaybackModeService.ModeChanged += OnModeChanged;
        PlaybackModeService.StatusMessage += OnStatusMessage;
    }

    private void UpdateModeFromService()
    {
        isServerMode = PlaybackModeService.CurrentMode.ToString() == "Server";
    }    private void SetModeToServer()
    {
        try
        {
            Console.WriteLine("SetModeToServer called");
            
            // Get the current mode property and its type
            var currentModeProperty = PlaybackModeService.GetType().GetProperty("CurrentMode");
            var enumType = currentModeProperty.PropertyType;
            
            // Parse "Server" as the enum value
            var serverValue = Enum.Parse(enumType, "Server");
            currentModeProperty.SetValue(PlaybackModeService, serverValue);
            
            Console.WriteLine($"Mode set to Server");
            UpdateModeFromService();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in SetModeToServer: {ex}");
            Logger.LogError(ex, "Error setting playback mode to Server");
            statusMessage = $"Error: {ex.Message}";
            StateHasChanged();
        }
    }

    private void SetModeToLocal()
    {
        try
        {
            Console.WriteLine("SetModeToLocal called");
            
            // Get the current mode property and its type
            var currentModeProperty = PlaybackModeService.GetType().GetProperty("CurrentMode");
            var enumType = currentModeProperty.PropertyType;
            
            // Parse "Local" as the enum value
            var localValue = Enum.Parse(enumType, "Local");
            currentModeProperty.SetValue(PlaybackModeService, localValue);
            
            Console.WriteLine($"Mode set to Local");
            UpdateModeFromService();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in SetModeToLocal: {ex}");
            Logger.LogError(ex, "Error setting playback mode to Local");
            statusMessage = $"Error: {ex.Message}";
            StateHasChanged();
        }
    }

    private void OnModeChanged(object? sender, object mode)
    {
        Console.WriteLine($"OnModeChanged: {mode}");
        UpdateModeFromService();
        InvokeAsync(StateHasChanged);
    }

    private void OnStatusMessage(object? sender, string message)
    {
        statusMessage = message;
        InvokeAsync(StateHasChanged);
        
        // Clear status message after a few seconds
        _ = Task.Delay(3000).ContinueWith(_ =>
        {
            if (statusMessage == message)
            {
                statusMessage = null;
                InvokeAsync(StateHasChanged);
            }
        });
    }

    public void Dispose()
    {
        PlaybackModeService.ModeChanged -= OnModeChanged;
        PlaybackModeService.StatusMessage -= OnStatusMessage;
    }
}

<style>
    .playback-mode-selector {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        padding: 0.75rem;
        margin-bottom: 1rem;
    }
</style>
