@page "/"
@inject HomeSpeakerService svc;
@inject ILogger<Index> logger
@using Microsoft.Fast.Components.FluentUI

<div class="row">
    <div class="col-xl-6 col-lg-12">
        <TemperatureMonitor />
    </div>
    <div class="col-xl-6 col-lg-12">
        <BloodSugarMonitor />
    </div>
</div>

<div class="row">
    <div class="col">
        <FluentSearch class="w-100 mb-2" Placeholder="Search / Filter" DisplayName="Search & Filter" ValueChanged="(s)=>FilterValue = s" ValueExpression="() => FilterValue" />
    </div>
    <div class="col-auto gx-0">
        <button @onclick=refresh class="btn btn-primary d-md-none"><span class="oi oi-magnifying-glass"></span></button>
        <button @onclick=refresh class="btn btn-primary d-none d-md-block"><span class="oi oi-magnifying-glass me-2"></span>Search </button>
    </div>
    <div class="col-auto ps-1">
        <button @onclick=reloadSongsAsync class="btn btn-secondary d-md-none"><span class="oi oi-reload"></span></button>
        <button @onclick=reloadSongsAsync class="btn btn-secondary d-none d-md-block"><span class="oi oi-reload me-2"></span>Refresh</button>
    </div>
</div>

@if (songs == null)
{
    <p>Loading...</p>
}
else if (numPages == 0)
{
    <div class="text-center">
        No artists / albums / songs contain '@FilterValue'
    </div>
}
else
{
    if (numPages > 1)
    {
        <div class="d-flex justify-content-around mt-2">
            <FluentButton @onclick=@(()=>pageNum--) Disabled=@(pageNum == 0)><span class="oi oi-chevron-left me-2" />Prev Page</FluentButton>
            <div>
                Page @(
               pageNum + 1
               ) of @numPages
            </div>
            <FluentButton @onclick=@(()=>pageNum++) Disabled=@(pageNum+1 >= numPages)>Next Page <span class="oi oi-chevron-right ms-2" /></FluentButton>
        </div>
    }

    @foreach (var artist in (artists?.Skip(pageSize * pageNum).Take(pageSize)) ?? Enumerable.Empty<IGrouping<string, SongViewModel>>())
    {
        <Artist Content="@artist" />
    }
}

@code {
    private int pageNum = 0;
    private int pageSize = 200;
    private int numPages = 0;
    private int artistCount;
    private string? filterValue;
    public string? FilterValue
    {
        get => filterValue;
        set
        {
            logger.LogInformation("Setting FilterValue to {value}", value);
            filterValue = value;
            refresh();
        }
    }

    IEnumerable<SongViewModel>? songs;
    IOrderedEnumerable<IGrouping<string, SongViewModel>>? artists;

    protected override async Task OnInitializedAsync()
    {
        await reloadSongsAsync();
    }

    async Task reloadSongsAsync()
    {
        songs = null;
        StateHasChanged();
        songs = await svc.GetAllSongsAsync();
        FilterValue = null;
        refresh();
    }

    void refresh()
    {
        if (songs == null)
            return;

        var filteredSongs = songs;
        if (!string.IsNullOrWhiteSpace(FilterValue))
        {
            logger.LogInformation("Filtering artists, albums and songs like {filterValue}", filterValue);

            filteredSongs = songs.Where(a =>
                (a.Artist?.Contains(FilterValue, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.Album?.Contains(FilterValue, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (a.Name?.Contains(FilterValue, StringComparison.OrdinalIgnoreCase) ?? false)
            );
        }

        artists = from s in filteredSongs
                  group s by s.Artist into artists
                  orderby artists.Key
                  select artists;
        artistCount = artists?.Count() ?? 0;
        numPages = (artistCount + pageSize - 1) / pageSize;
    }
}